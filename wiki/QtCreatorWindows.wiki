#summary QtCreator (Multi-platform C++ IDE) How to configure for Screen on Windows

  * *Prerequisites*
    * [ProjectOrientedSourceManagement Project/Pack oriented source management]
    * [SBSInstall How to install SBS]
  * *Back links*
    * [DevelopmentEnvironment Development environment]

= Introduction =

!QtCreator is an environment based on Qt libraties and MingW compiler.

This environment provides easily configurable environment with advance features (makefiles, auto-indentation, auto-completion, debugger, ...).

In Screen developement, we will not use qmake but directly CMake files generated by SBS.

= !QtCreator =

== Download !QtCreator ==

Download the installer on Nokia page :

http://qt.nokia.com/downloads/downloads

You have several choices :
  * get all Qt SDK, as !QtCreator is part of it. If you plan to use Screen with Qt this is a good choice.
  * !QtCreator alone

In both cases, you will have in local :
  * The complete !QtCreator environment, with the possibility to create CMake projects
  * A mingw compiler (we will use this compiler on our configuration)

== Install !QtCreator ==

Launch the installer you downloaded in the previous part as follow the instructions.

After the installation completed, you must precise some paths in your environment

Add in PATH the paths to mingw and qt executables and libraries (for example C:\qtsdk\mingw\bin;C:\qtsdk\qt\bin;)

== First launch ==

Launch !QtCreator.

The first thing you must do is to create a new session for screen development.

To do this, go to File > Session Manager

Click on New to create the new session and follow instruction. Now you have a session on switch Screen projects will be kept.

== Project creation ==

First, if you didn't do it, check-out Screen sources and install SBS : [SBSInstall How to install SBS].

Then, open the minw.config file in your %HOME%/.sbs folder, and change the MINGW_ROOT variable by your mingw installation path (for example C:/qtsdk/mingw/bin)

Then, in a command prompt, write :
{{{
sbs configure -g -e mingw -e screen -e user
}}}

In the same command prompt, go to Screen root file and write :
{{{
generate-screen-release.bat
}}}
or
{{{
generate-screen-debug.bat
}}}
It will prepare all CMake files for respectively release or debug mode

If you want, you could compile them without !QtCreator by using :
{{{
compile-screen-release.bat
}}}
or
{{{
compile-screen-debug.bat
}}}
It will also generates CMake files

Now you must create every project in your Screen session.

It do it, do `File > Open file or project`, and open the generated CMakeLists.txt file. It will completely create the project and ask to execute Cmake to completely configure it. Do it for each Screen component.

Note : Each time you will recreate the CMake files, !QtCreator will ask ot execute CMake. You will be need to accept it. 

== Some additional configurations ==

We will set the behaviour for tabulation.

To do it, go into Tools > Options ... > Text Editor > Behavior

First uncheck _Insert spaces instead of tabs_ and check _Enable automatic indentation_

Then set _Tab size_ and _Indent size_ to 4

== Dependencies ==

SBS/!QtCreator environment doesn't compile needed dependencies by itself. You need to build external and Screen libraries.

_N.B._ : In SBS future evolutions, the latter will automatically search dependencies and build them. For external libraries, we will create specific packages.

== Builds ==

To build a project into !QtCreator, right-click on the project and select "compile the ... project"

== Launch ==

For now, you can't launch your project from !QtCreator (for now).
To do this, run in a command prompt :
{{{
sbs run <path-to-your-component> 
}}}
or
{{{
sbs run <path-to-your-component> -d
}}}

To run tests :
{{{
sbs test <path-to-your-component> 
}}}
or
{{{
sbs test <path-to-your-component> -d
}}}