#summary QtCreator (Multi-platform C++ IDE) How to configure for Screen on Linux

  * *Prerequisites*
    * [ProjectOrientedSourceManagement Project/Pack oriented source management]
    * [SBSInstall How to install SBS]
  * *Back links*
    * [DevelopmentEnvironment Development environment]

= Introduction =

!QtCreator is an environment based on Qt libraties and GCC compiler.

This environment provides easily configurable environment with advance features (makefiles, auto-indentation, auto-completion, debugger, ...).

In Screen developement, we will not use qmake but directly CMake files generated by SBS.

= !QtCreator =

== Download ad install !QtCreator ==

on almost all Linux system, you can directly download and install QtCreator through the package manager. For example, on Ubuntu :
{{{
sudo apt-get install qtcreator
}}}
That's all ;)

== First launch ==

Launch !QtCreator.

The first thing you must do is to create a new session for screen development.

To do this, go to File > Session Manager

Click on New to create the new session and follow instruction. Now you have a session on switch Screen projects will be kept.

== Project creation ==

First, if you didn't do it, check-out Screen sources and install SBS : [SBSInstall How to install SBS].

Then, in a command prompt, write :
{{{
sbs generate -g -e linux -e screen -e user
}}}

In the same command prompt, go to Screen root file and write :
{{{
generate-screen-release.bat
}}}
or
{{{
generate-screen-debug.bat
}}}
It will prepare all CMake files for respectively release or debug mode

If you want, you could compile them without !QtCreator by using :
{{{
compile-screen-release.bat
}}}
or
{{{
compile-screen-debug.bat
}}}
It will also generates CMake files

Now you must create every project in your Screen session.

It do it, do `File > Open file or project`, and open the generated CMakeFiles.txt file. It will completely create the project and ask to execute Cmake to completely configure it. Do it for each Screen component.

Note : Each time you will recreate the CMake files, !QtCreator will ask ot execute CMake. You will be need to accept it. 

== Dependencies ==

SBS/!QtCreator environment doesn't compile needed dependencies by itself. You need to build external and Screen libraries.

_N.B._ : In SBS future evolutions, the latter will automatically search dependencies and build them. For external libraries, we will create specific packages.

== Builds ==

To build a project into !QtCreator, right-click on the project and select "compile the ... project"

== Launch ==

For now, you can't launch your project from !QtCreator (for now).
To do this, run in a command prompt :
{{{
sbs run <path-to-your-component> 
}}}
or
{{{
sbs run <path-to-your-component> -d
}}}

To run tests :
{{{
sbs test <path-to-your-component> 
}}}
or
{{{
sbs test <path-to-your-component> -d
}}}