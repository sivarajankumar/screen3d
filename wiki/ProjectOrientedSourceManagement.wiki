#summary POSM : Project/Pack oriented source management

  * *Back links*
    * [MainPage Main page of Screen Wiki]
    * [DevelopmentEnvironment Development environment]

= Introduction =

This part intends to explain how Screen organizes its sources and its build system. 

Screen is based on a plug-in architecture : each important pack of the Screen project is defined by a dynamic library (.dll/.so) that represents a plug-in.

This architecture allows to parallelize developments and to minimize dependencies. Furthermore, it permits deferred publication of different plug-ins and simplifies patches.

= Source architecture =

Screen source management is designed in a very strict but extensive way in order to structure developments and unify all development under common concepts.

All packs are designed in the same way :
  * a root folder of the pack, placed at root of the repository. it contains 3 things :
    * a *include* folder, that contains all pack headers
    * a *src* folder, that contains all pack sources
    * a *test* folder , that contains all pack tests
    * a *sbs.xml* file, that contains configurations of the pack

Note : in some cases, you can find/add header files into src folder. It's the case then you don't want users to access to this header files. For example, in Screen/XML, _!XercesParser.h_ is in src because the library interface intends to be independant from the parsing library.

This schema sums up the design :
{{{
trunk
|
---> <pack name>
|    |
|    ---> sbs.xml
|    |
|    ---> include
|    |    |
|    |    --->Screen
|    |        |
|    |        ...
|    |
|    ---> src
|    |    |
|    |    --->Screen
|    |        |
|    |        ...
|    |
|    ---> test
|         |
|         --->Screen
|             |
|             ...
|
---> <another pack>
|    |
|    ...
|
...             
}}}

= SBS : Screen Build System =

*SBS is under development and will be published soon*

== Aims ==

SBS is build system using CMake. It generates CMakeLists.txt and CMakeCache.txt files, generates makefile with these files with CMake and compile the pack.

SBS uses 2 differents files in order to process :
  * a *sbs.xml* file
  * the *sbs.config* file, that contains all global configurations (paths, compiler choice, compiler options, ...). This file is placed in SBS root folder.

{{{
sbs.xml --------|
                |            |----> CMakeLists.txt -----|              |-----> makefile ----|
sbs.config -----|---> SBS ---|                          |---> cmake ---|                    |---> make ---> Pack (dll/exe/...)
                |            |----> CMakeCache.txt -----|              |---> IDE configs ---|
<env>.config----|
}}}

== Example ==

  * sbs.xml :

{{{
<?xml version="1.0" encoding="UTF-8"?>
<pack>
	<properties>
		<name>Screen/Main</name>
		<version>0.1.0</version>
		<buildtype>shared</buildtype>
	</properties>
	<main>
		<dependencies>
			<dependency name="Screen/Utils" sbs="true" root="${SCREEN_UTILS_ROOT}"/>
			<dependency name="boost">
				<includes>
					<path>${BOOST_INC_ROOT}</path>
				</includes>
				<libraries>
					<path>${BOOST_LIB_ROOT}</path>
					<lib>boost_thread-${BOOST_LIB_EXTENSION}</lib>
				</libraries>
			</dependency>
			<dependency name="DevIL">
				<includes>
					<path>${DEVIL_INC_ROOT}</path>
				</includes>
				<libraries>
					<path>${DEVIL_LIB_ROOT}</path>
					<lib>DevIL</lib>
				</libraries>
			</dependency>
		</dependencies>
		<flags>
			<flag flag="SCREEN_BUILD_SHARED_LIBRARY" config="all" />
		</flags>
	</main>
	<test>
		<dependencies>
			<dependency name="Screen/Main" sbs="true" root="${SCREEN_MAIN_ROOT}"/>
			<dependency name="Screen/Utils" sbs="true" root="${SCREEN_UTILS_ROOT}"/>
			<dependency name="boost">
				<includes>
					<path>${BOOST_INC_ROOT}</path>
				</includes>
				<libraries>
					<path>${BOOST_LIB_ROOT}</path>
					<lib>boost_thread-${BOOST_LIB_EXTENSION}</lib>
				</libraries>
			</dependency>
			<dependency name="cppunit">
				<includes>
					<path>${CPPUNIT_INC_ROOT}</path>
				</includes>
				<libraries>
					<path>${CPPUNIT_LIB_ROOT}</path>
					<lib>cppunit-${CPPUNIT_VERSION}</lib>
				</libraries>
			</dependency>
		</dependencies>
	</test>
</pack>

}}}

  * sbs.config :

{{{
#global configuration file for SBS

SCREEN_UTILS_ROOT = ${SCREEN_ROOT}/Screen/Utils
SCREEN_MAIN_ROOT = ${SCREEN_ROOT}/Screen/Main
SCREEN_OPENGL_ROOT = ${SCREEN_ROOT}/Screen/OpenGL

BOOST_INC_ROOT = ${BOOST_ROOT}
BOOST_LIB_ROOT = ${BOOST_ROOT}/stage/lib

DEVIL_INC_ROOT = ${DEVIL_ROOT}/include
DEVIL_LIB_ROOT = ${DEVIL_ROOT}/lib

SFML_INC_ROOT = ${SFML_ROOT}/include
SFML_LIB_ROOT = ${SFML_ROOT}/lib/${SFML_COMPILER}

CPPUNIT_INC_ROOT = ${CPPUNIT_ROOT}/include
CPPUNIT_LIB_ROOT = ${CPPUNIT_ROOT}/src/cppunit/.libs
}}}

   * wascana.config :

{{{
#Wascana specific configuration file for SBS

ENV_NAME = Wascana
TARGET_ENV = Eclipse CDT4 - Unix Makefiles
MAKE_PROGRAM = ${WASCANA_ROOT}/msys/bin/make.exe
C_COMPILER = ${WASCANA_ROOT}/mingw/bin/gcc.exe
CPP_COMPILER = ${WASCANA_ROOT}/mingw/bin/g++.exe

BOOST_LIB_EXTENSION = mgw34-mt-${BOOST_VERSION}

SFML_COMPILER = mingw
}}}

   * thoratou.config

{{{
#personal specific configuration 

WASCANA_ROOT = C:/Wascana

REPOSITORY_ROOT = C:/lib/sbs-repo
RELEASE_FLAGS = SCREEN_ASSERT SCREEN_AUTHORIZE_LOG_INFO
DEBUG_FLAGS = SCREEN_ASSERT SCREEN_AUTHORIZE_LOG_DEBUG
# SCREEN_AUTHORIZE_PROFILE SCREEN_AUTHORIZE_LOG_CALL_TRACER

SCREEN_ROOT = C:/Documents and Settings/Administrateur/Mes documents/Projets Personnels/SVNScreen

BOOST_VERSION = 1_37
BOOST_ROOT = C:/lib/boost_${BOOST_VERSION}_0

DEVIL_ROOT = C:/lib/DevIL-SDK-x86-1.7.8

SFML_VERSION = 1.5
SFML_ROOT = C:/lib/SFML-${SFML_VERSION}

CPPUNIT_VERSION = 1-12-1
CPPUNIT_ROOT = C:/lib/cppunit-1.12.1
}}}

== Commands ==

SBS divides is functionalities into phases. Each phase processes only a little part of the tool capabilities.

For now, there are only 6 available phases :
  * LOAD_CONF (loads only general configuration file sbs.config)
  * LOAD_XML (loads specified sbs.xml file)
  * CHECK (verifies all fields)
  * CHECK_TEST (verifies all fields for tests)
  * GENERATE (generates cmake files, specific makefiles and environment) 
  * GENERATE_TEST (generates cmake files, specific makefiles and environment for tests)

To use these phases, you must use specific commands :

{{{
sbs <path-to-sbs.xml> <phase> [options]
}}}

example :

{{{
sbs . generate -e wascana -e thoratou
}}}
generates makefile and project for Wascana environment.

== Available phases ==

||  || LOAD_CONF || LOAD_XML || CHECK || CHECK_TEST || GENERATE || GENERATE_TEST ||
|| check || X || X || X ||  ||  ||  ||
|| check -t || X || X ||  || X ||  ||  ||
|| check -b || X || X || X || X ||  ||  ||
|| generate || X || X || X ||  || X ||  ||
|| generate -t || X || X ||  || X ||  || X ||
|| generate -b || X || X || X || X || X || X ||

== Options ==

{{{
-e <env> : set specific environment configurations
-v : verbose (debug mode)
-d : debug compile
-t : apply to component tests
-b : apply to both the component itself and tests
}}}

= Local Repository Architecture =

  * Repository tree

{{{
<repository root>
|
---> <component> ex: Screen/Main
|    |
|    ---> <version> ex: 0.1.0
|         |
|         ---> component.xml (contains the description of the component)
|         |
|         ---> include (contains public includes of the component)
|         |
|         ---> lib
|              |
|              ---> <environment name> ex: Wascana
|                   |
|                   ---> Release (contains release libraries of the component)
|                        |
|                        --->library-description.xml (contains Release library descriptions)
|                   |
|                   ---> Debug (contains debug libraries of the component)
|                        |
|                        --->library-description.xml (contains Debug library descriptions)
|
---> <another component>
|    |
|    ...
|
...             
}}}

  * component.xml

{{{
<?xml version="1.0" encoding="UTF-8"?>
<pack>
	<properties>
		<name>Screen/Main</name>
		<version>0.1.0</version>
		<buildtype>shared</buildtype>
	</properties>
	<main>
		<dependencies>
			<dependency name="Screen/Main">
				<includes>
					<path>/home/thomas/Developements/Screen/trunk/Screen/Main/include/</path>
				</includes>
			</dependency>
		</dependencies>
	</main>
</pack>

}}}

  * library-description.xml

{{{
<?xml version="1.0" encoding="UTF-8"?>
<descriptions>
	<library name="Screen/Main" type="shared" full-name="libScreenMain.so" compiler-name="libScreenMain" />
</descriptions>

}}}

<wiki:comment>
|| *Generates makefiles* || ||
|| generate makefiles || sbs `<path-to-pack>` generate ||
|| *Compile* || ||
|| compile the Pack sources || sbs `<path-to-pack>` compile ||
|| compile the Pack tests || sbs `<path-to-pack>` compile -t ||
|| compile the Pack sources and tests || sbs `<path-to-pack>` compile -b ||
|| *Generates makefiles and compile* || ||
|| generate makefiles and compile the Pack sources || sbs `<path-to-pack>` build ||
|| generate makefiles and compile the Pack tests || sbs `<path-to-pack>` build -t ||
|| generate makefiles and compile the Pack sources and tests || sbs `<path-to-pack>` build -b ||
|| *Run tests* || ||
|| run tests || sbs `<path-to-pack>` test ||
</wiki:comment>