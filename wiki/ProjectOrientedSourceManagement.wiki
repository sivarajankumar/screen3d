#summary POSM : Project/Pack oriented source management

= Introduction =

This part intends to explain how Screen organizes its sources and its build system. 

Screen is based on a plug-in architecture : each important pack of the Screen project is defined by a dynamic library (.dll/.so) that represents a plug-in.

This architecture allows to parallelize developments and to minimize dependencies. Furthermore, it permits deferred publication of different plug-ins and simplifies patches.

= Source architecture =

Screen source management is designed in a very strict but extensive way in order to structure developments and unify all development under common concepts.

All packs are designed in the same way :
  * a root folder of the pack, placed at root of the repository. it contains 3 things :
    * a *include* folder, that contains all pack headers
    * a *src* folder, that contains all pack sources
    * a *test* folder , that contains all pack tests
    * a *sbs.xml* file, that contains configurations of the pack

Note : in some cases, you can find/add header files into src folder. It's the case then you don't want users to access to this header files. For example, in Screen/XML, _!XercesParser.h_ is in src because the library interface intends to be independant from the parsing library.

This schema sums up the design :
{{{
trunk
|
---> <pack name>
|    |
|    ---> sbs.xml
|    |
|    ---> include
|    |    |
|    |    --->Screen
|    |        |
|    |        ...
|    |
|    ---> src
|    |    |
|    |    --->Screen
|    |        |
|    |        ...
|    |
|    ---> test
|         |
|         --->Screen
|             |
|             ...
|
---> <another pack>
|    |
|    ...
|
...             
}}}

= SBS : Screen Build System =

*SBS is under development and will be published soon*

== Aims ==

SBS is build system using CMake. It generates CMakeLists.txt and CMakeCache.txt files, generates makefile with these files with CMake and compile the pack.

SBS uses 2 differents files in order to process :
  * a *sbs.xml* file
  * the *sbs.config* file, that contains all global configurations (paths, compiler choice, compiler options, ...). This file is placed in SBS root folder.

{{{
sbs.xml --------|
                |            |----> CMakeLists.txt -----|              |-----> makefile ----|
sbs.config -----|---> SBS ---|                          |---> cmake ---|                    |---> make ---> Pack (dll/exe/...)
                |            |----> CMakeCache.txt -----|              |---> IDE configs ---|
<env>.config----|
}}}

== Example ==

  * sbs.xml :

{{{
<?xml version="1.0" encoding="UTF-8"?>
<pack>
    <properties>
        <name>Screen/Main</name>
        <version>0.1.0</version>
        <buildtype>shared</buildtype>
    </properties>
    <dependencies>
        <dependency name="boost">
            <includes>
                <path>${BOOST_INC_ROOT}</path>
            </includes>
            <libraries>
                <path>${BOOST_LIB_ROOT}</path>
                <lib>boost_thread-${BOOST_LIB_EXTENSION}</lib>
            </libraries>
        </dependency>
        <dependency name="DevIL">
            <includes>
                <path>${DEVIL_INC_ROOT}</path>
            </includes>
            <libraries>
                <path>${DEVIL_LIB_ROOT}</path>
                <lib>DevIL</lib>
            </libraries>
        </dependency>
    </dependencies>
    <flags>
        <flag flag="SCREEN_BUILD_SHARED_LIBRARY" config="all" />
    </flags>
</pack>

}}}

  * sbs.config :
{{{
#global configuration file for SBS

REPOSITORY_ROOT = C:/lib/sbs-repo
RELEASE_FLAGS = SCREEN_ASSERT SCREEN_AUTHORIZE_LOG_INFO
DEBUG_FLAGS = SCREEN_ASSERT SCREEN_AUTHORIZE_LOG_DEBUG SCREEN_AUTHORIZE_PROFILE SCREEN_AUTHORIZE_LOG_CALL_TRACER

SCREEN_MAIN_ROOT = C:/Documents and Settings/Administrateur/Mes documents/Projets Personnels/SVNScreen/Screen/Main
SCREEN_OPENGL_ROOT = C:/Documents and Settings/Administrateur/Mes documents/Projets Personnels/SVNScreen/Screen/OpenGL

BOOST_INC_ROOT = C:/lib/boost_1_37_0
BOOST_LIB_ROOT = C:/lib/boost_1_37_0/stage/lib

DEVIL_INC_ROOT = C:/lib/DevIL-SDK-x86-1.7.8/include
DEVIL_LIB_ROOT = C:/lib/DevIL-SDK-x86-1.7.8/lib

SFML_INC_ROOT = C:/lib/SFML-1.5/include
}}}

   * wascana.config (i.e called `<env>`.config) :
{{{
#Wascana specific configuration file for SBS

ENV_NAME = Wascana
TARGET_ENV = Eclipse CDT4 - Unix Makefiles
MAKE_PROGRAM = C:/Wascana/msys/bin/make.exe
C_COMPILER = C:/Wascana/mingw/bin/gcc.exe
CPP_COMPILER = C:/Wascana/mingw/bin/g++.exe

BOOST_LIB_EXTENSION = mgw34-mt-1_37

SFML_LIB_ROOT = C:/lib/SFML-1.5/lib/mingw
}}}

== Commands ==

<wiki:comment>
|| *Generates makefiles* || ||
|| generate makefiles || sbs `<path-to-pack>` generate ||
|| *Compile* || ||
|| compile the Pack sources || sbs `<path-to-pack>` compile ||
|| compile the Pack tests || sbs `<path-to-pack>` compile -t ||
|| compile the Pack sources and tests || sbs `<path-to-pack>` compile -b ||
|| *Generates makefiles and compile* || ||
|| generate makefiles and compile the Pack sources || sbs `<path-to-pack>` build ||
|| generate makefiles and compile the Pack tests || sbs `<path-to-pack>` build -t ||
|| generate makefiles and compile the Pack sources and tests || sbs `<path-to-pack>` build -b ||
|| *Run tests* || ||
|| run tests || sbs `<path-to-pack>` test ||
</wiki:comment>